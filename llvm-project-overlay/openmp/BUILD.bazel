load("@bazel_skylib//rules:expand_template.bzl", "expand_template")
load("@rules_ll//ll:defs.bzl", "ll_library")

LIBOMP_SOURCES = [
    "runtime/src/kmp_alloc.cpp",
    "runtime/src/kmp_atomic.cpp",
    "runtime/src/kmp_csupport.cpp",
    "runtime/src/kmp_debug.cpp",
    "runtime/src/kmp_itt.cpp",
    "runtime/src/kmp_environment.cpp",
    "runtime/src/kmp_error.cpp",
    "runtime/src/kmp_global.cpp",
    "runtime/src/kmp_i18n.cpp",
    "runtime/src/kmp_io.cpp",
    "runtime/src/kmp_runtime.cpp",
    "runtime/src/kmp_settings.cpp",
    "runtime/src/kmp_str.cpp",
    "runtime/src/kmp_tasking.cpp",
    "runtime/src/kmp_threadprivate.cpp",
    "runtime/src/kmp_utility.cpp",
    "runtime/src/kmp_barrier.cpp",
    "runtime/src/kmp_wait_release.cpp",
    "runtime/src/kmp_affinity.cpp",
    "runtime/src/kmp_dispatch.cpp",
    "runtime/src/kmp_lock.cpp",
    "runtime/src/kmp_sched.cpp",

    # Linux specific.
    "runtime/src/z_Linux_util.cpp",
    "runtime/src/kmp_gsupport.cpp",

    # Additional files.
    "runtime/src/thirdparty/ittnotify/ittnotify_static.cpp",  # itt notify.
    "runtime/src/kmp_debugger.cpp",  # debugger
    # "runtime/src/kmp_stats.cpp", # stats
    # "runtime/src/kmp_stats_timing.cpp", # stats
    "runtime/src/kmp_taskdeps.cpp",
    "runtime/src/kmp_cancel.cpp",

    # Other.
    "runtime/src/kmp_ftn_cdecl.cpp",
    "runtime/src/kmp_ftn_extra.cpp",
    "runtime/src/kmp_version.cpp",
    "runtime/src/ompt-general.cpp",  # ompt
    "runtime/src/ompt-specific.cpp",  # ompt, missing in CMake.
    "runtime/src/ompd-specific.cpp",  # ompd

    # GNU Asm.
    "runtime/src/z_Linux_asm.S",
]

expand_template(
    name = "omp_header",
    out = "runtime/src/include/omp.h",
    substitutions = {
        "@LIBOMP_VERSION_MAJOR@": "5",
        "@LIBOMP_VERSION_MINOR@": "0",
        "@LIBOMP_VERSION_BUILD@": "0",
        "@LIBOMP_BUILD_DATE@": "Masked",
    },
    template = "runtime/src/include/omp.h.var",
    visibility = ["//visibility:public"],
)

expand_template(
    name = "omp_tools_h",
    out = "runtime/src/include/omp-tools.h",
    substitutions = {},
    template = "runtime/src/include/omp-tools.h.var",
    visibility = ["//visibility:public"],
)

expand_template(
    name = "kmp_config_h",
    out = "runtime/src/kmp_config.h",
    substitutions = {
        "#cmakedefine01 DEBUG_BUILD": "#define DEBUG_BUILD 0",
        "#cmakedefine01 RELWITHDEBINFO_BUILD": "#define RELWITHDEBINFO_BUILD 0",
        "#cmakedefine01 LIBOMP_USE_ITT_NOTIFY": "#define LIBOMP_USE_ITT_NOTIFY 1",
        "#cmakedefine01 LIBOMP_USE_VERSION_SYMBOLS": "#define LIBOMP_USE_VERSION_SYMBOLS 1",
        "#cmakedefine01 LIBOMP_HAVE_WEAK_ATTRIBUTE": "#define LIBOMP_HAVE_WEAK_ATTRIBUTE 1",
        "#cmakedefine01 LIBOMP_HAVE_PSAPI": "#define LIBOMP_HAVE_PSAPI 0",
        "#cmakedefine01 LIBOMP_STATS": "#define LIBOMP_STATS 0",
        "#cmakedefine01 LIBOMP_HAVE_X86INTRIN_H": "#define LIBOMP_HAVE_X86INTRIN_H 0",
        "#cmakedefine01 LIBOMP_HAVE___BUILTIN_READCYCLECOUNTER": "#define LIBOMP_HAVE___BUILTIN_READCYCLECOUNTER 0",
        "#cmakedefine01 LIBOMP_HAVE___RDTSC": "#define LIBOMP_HAVE___RDTSC 0",
        "#cmakedefine01 LIBOMP_USE_DEBUGGER": "#define LIBOMP_USE_DEBUGGER 0",
        "#cmakedefine01 LIBOMP_OMPT_DEBUG": "#define LIBOMP_OMPT_DEBUG 0",
        "#cmakedefine01 LIBOMP_OMPT_SUPPORT": "#define LIBOMP_OMPT_SUPPORT 1",
        "#cmakedefine01 LIBOMP_OMPD_SUPPORT": "#define LIBOMP_OMPD_SUPPORT 1",
        "#cmakedefine01 LIBOMP_OMPX_TASKGRAPH": "#define LIBOMP_OMPX_TASKGRAPH 1",
        "#cmakedefine01 LIBOMP_PROFILING_SUPPORT": "#define LIBOMP_PROFILING_SUPPORT 0",
        "#cmakedefine01 LIBOMP_OMPT_OPTIONAL": "#define LIBOMP_OMPT_OPTIONAL 1",
        "#cmakedefine01 LIBOMP_USE_ADAPTIVE_LOCKS": "#define LIBOMP_USE_ADAPTIVE_LOCKS 1",
        "#cmakedefine01 LIBOMP_USE_INTERNODE_ALIGNMENT": "#define LIBOMP_USE_INTERNODE_ALIGNMENT 0",
        "#cmakedefine01 LIBOMP_ENABLE_ASSERTIONS": "#define LIBOMP_ENABLE_ASSERTIONS 0",
        "#cmakedefine01 LIBOMP_USE_HIER_SCHED": "#define LIBOMP_USE_HIER_SCHED 0",
        "#cmakedefine01 STUBS_LIBRARY": "#define STUBS_LIBRARY 0",
        "#cmakedefine01 LIBOMP_USE_HWLOC": "#define LIBOMP_USE_HWLOC 0",
        "#cmakedefine01 LIBOMP_ENABLE_SHARED": "#define LIBOMP_ENABLE_SHARED 1",
        "@LIBOMP_LEGAL_ARCH@": "Intel(R) 64",
        "@LIBOMP_LIB_FILE@": "libomp.so",
        "@LIBOMP_VERSION_MAJOR@": "5",
        "@LIBOMP_VERSION_MINOR@": "0",
        "#cmakedefine01 MSVC": "#define MSVC 0",
        "#cmakedefine01 LIBOMP_HAVE_WAITPKG_INTRINSICS": "#define LIBOMP_HAVE_WAITPKG_INTRINSICS 1",
        "#cmakedefine01 LIBOMP_HAVE_RTM_INTRINSICS": "#define LIBOMP_HAVE_RTM_INTRINSICS 1",
        "#cmakedefine01 LIBOMP_HAVE_IMMINTRIN_H": "#define LIBOMP_HAVE_IMMINTRIN_H 1",
        "#cmakedefine01 LIBOMP_HAVE_INTRIN_H": "#define LIBOMP_HAVE_INTRIN_H 0",
        "#cmakedefine01 LIBOMP_HAVE_ATTRIBUTE_WAITPKG": "#define LIBOMP_HAVE_ATTRIBUTE_WAITPKG 1",
        "#cmakedefine01 LIBOMP_HAVE_ATTRIBUTE_RTM": "#define LIBOMP_HAVE_ATTRIBUTE_RTM 1",
        "#cmakedefine01 LIBOMP_ARCH_AARCH64_A64FX": "#define LIBOMP_ARCH_AARCH64_A64FX 0",
        "#cmakedefine01 LIBOMP_HAVE_XMMINTRIN_H": "#define LIBOMP_HAVE_XMMINTRIN_H 1",
        "#cmakedefine01 LIBOMP_HAVE__MM_MALLOC": "#define LIBOMP_HAVE__MM_MALLOC 1",
        "#cmakedefine01 LIBOMP_HAVE_ALIGNED_ALLOC": "#define LIBOMP_HAVE_ALIGNED_ALLOC 1",
        "#cmakedefine01 LIBOMP_HAVE_POSIX_MEMALIGN": "#define LIBOMP_HAVE_POSIX_MEMALIGN 1",
        "#cmakedefine01 LIBOMP_HAVE__ALIGNED_MALLOC": "#define LIBOMP_HAVE__ALIGNED_MALLOC 0",
        "#cmakedefine01 OPENMP_ENABLE_LIBOMPTARGET": "#define ENABLE_LIBOMPTARGET OPENMP_ENABLE_LIBOMPTARGET",  #TODO: enable.
    },
    template = "runtime/src/kmp_config.h.cmake",
)

ll_library(
    name = "libomp",
    srcs = LIBOMP_SOURCES,
    # Includes the following manually generated patched-in headers.
    # We ultimately need these to be generated as part of the build.
    # "runtime/src/kmp_i18n_default.inc",
    # "runtime/src/kmp_i18n_id.inc",
    hdrs = glob([
        "runtime/src/*.inc",
        "runtime/src/*.h",
        "runtime/src/*.inl",
        "runtime/src/thirdparty/ittnotify/*.h",
        "runtime/src/thirdparty/ittnotify/legacy/*.h",
    ]) + [
        ":kmp_config_h",
        ":omp_header",
        ":omp_tools_h",
    ],
    compile_flags = [
        "-std=c++17",
        "-Wno-switch",
    ],
    exposed_angled_includes = [
        "$(GENERATED)/openmp/runtime/src/include",
        "openmp/runtime/src/include",
    ],
    exposed_hdrs = [
        "runtime/src/include/omp.h",
    ],
    includes = [
        "$(GENERATED)/openmp/runtime/src",
        "openmp/runtime/src",
        "openmp/runtime/src/thirdparty/ittnotify",
    ],
    visibility = ["//visibility:public"],
)
