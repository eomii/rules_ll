load("@rules_ll//ll:defs.bzl", "ll_library")
load("@bazel_skylib//rules:expand_template.bzl", "expand_template")

expand_template(
    name = "module_modulemap_gen",
    out = "include/module.modulemap",
    substitutions = {
        "@requires_LIBCXX_ENABLE_LOCALIZATION@": "",
        "@requires_LIBCXX_ENABLE_FILESYSTEM@": "",
        "@requires_LIBCXX_ENABLE_FSTREAM@": "",
        "@requires_LIBCXX_ENABLE_THREADS@": "",
        "@requires_LIBCXX_ENABLE_WIDE_CHARACTERS@": "",
    },
    template = "include/module.modulemap.in",
)

NO = "/* undefined by Bazel. */"

expand_template(
    name = "__config_site_gen",
    out = "include/__config_site",
    substitutions = {
        "#cmakedefine _LIBCPP_ABI_VERSION @_LIBCPP_ABI_VERSION@": "#define _LIBCPP_ABI_VERSION 1",
        "#cmakedefine _LIBCPP_ABI_NAMESPACE @_LIBCPP_ABI_NAMESPACE@": "#define _LIBCPP_ABI_NAMESPACE __1",
        "#cmakedefine _LIBCPP_ABI_FORCE_ITANIUM": NO,
        "#cmakedefine _LIBCPP_ABI_FORCE_MICROSOFT": NO,
        "#cmakedefine _LIBCPP_HAS_NO_THREADS": NO,
        "#cmakedefine _LIBCPP_HAS_NO_MONOTONIC_CLOCK": NO,
        "#cmakedefine _LIBCPP_HAS_MUSL_LIBC": NO,
        "#cmakedefine _LIBCPP_HAS_THREAD_API_PTHREAD": NO,
        "#cmakedefine _LIBCPP_HAS_THREAD_API_EXTERNAL": NO,
        "#cmakedefine _LIBCPP_HAS_THREAD_API_WIN32": NO,
        "#cmakedefine _LIBCPP_HAS_THREAD_LIBRARY_EXTERNAL": NO,
        "#cmakedefine _LIBCPP_DISABLE_VISIBILITY_ANNOTATIONS": NO,
        "#cmakedefine _LIBCPP_HAS_NO_VENDOR_AVAILABILITY_ANNOTATIONS": "#define _LIBCPP_HAS_NO_VENDOR_AVAILABILITY_ANNOTATIONS",
        "#cmakedefine _LIBCPP_NO_VCRUNTIME": NO,
        "#cmakedefine _LIBCPP_TYPEINFO_COMPARISON_IMPLEMENTATION @_LIBCPP_TYPEINFO_COMPARISON_IMPLEMENTATION@": NO,
        "#cmakedefine _LIBCPP_HAS_NO_FILESYSTEM_LIBRARY": NO,
        "#cmakedefine _LIBCPP_HAS_PARALLEL_ALGORITHMS": NO,
        "#cmakedefine _LIBCPP_HAS_NO_RANDOM_DEVICE": NO,
        "#cmakedefine _LIBCPP_HAS_NO_LOCALIZATION": NO,
        "#cmakedefine _LIBCPP_HAS_NO_FSTREAM": NO,
        "#cmakedefine _LIBCPP_HAS_NO_WIDE_CHARACTERS": NO,
        "#cmakedefine01 _LIBCPP_ENABLE_ASSERTIONS_DEFAULT": "#define _LIBCPP_ENABLE_ASSERTIONS_DEFAULT 0",
        "#cmakedefine _LIBCPP_ENABLE_DEBUG_MODE": NO,
        "@_LIBCPP_ABI_DEFINES@": NO,
        "@_LIBCPP_EXTRA_SITE_DEFINES@": NO,
    },
    template = "include/__config_site.in",
)

filegroup(
    name = "headers",
    srcs = glob(["include/**/*"]) + [
        ":__config_site_gen",
        ":module_modulemap_gen",
    ],
    visibility = ["//visibility:public"],
)

filegroup(
    name = "sources",
    srcs = glob(["src/**/*"]),
    visibility = ["//visibility:public"],
)

ll_library(
    name = "libcxx",
    srcs = [
        "src/algorithm.cpp",
        "src/any.cpp",
        "src/atomic.cpp",
        "src/barrier.cpp",
        "src/bind.cpp",
        "src/charconv.cpp",
        "src/chrono.cpp",
        "src/condition_variable.cpp",
        "src/condition_variable_destructor.cpp",
        "src/exception.cpp",
        "src/filesystem/directory_iterator.cpp",
        "src/filesystem/operations.cpp",
        "src/format.cpp",
        "src/functional.cpp",
        "src/future.cpp",
        "src/hash.cpp",
        "src/ios.cpp",
        "src/ios.instantiations.cpp",
        "src/iostream.cpp",
        "src/legacy_pointer_safety.cpp",
        "src/locale.cpp",
        "src/memory.cpp",
        "src/mutex.cpp",
        "src/mutex_destructor.cpp",
        "src/new.cpp",
        "src/optional.cpp",
        "src/random.cpp",
        "src/random_shuffle.cpp",
        "src/regex.cpp",
        "src/ryu/d2fixed.cpp",
        "src/ryu/d2s.cpp",
        "src/ryu/f2s.cpp",
        "src/shared_mutex.cpp",
        "src/stdexcept.cpp",
        "src/string.cpp",
        "src/strstream.cpp",
        "src/system_error.cpp",
        "src/thread.cpp",
        "src/typeinfo.cpp",
        "src/valarray.cpp",
        "src/variant.cpp",
        "src/vector.cpp",
    ],
    hdrs = [
        # Files in src/include.
        "src/include/apple_availability.h",
        "src/include/atomic_support.h",
        "src/include/config_elast.h",
        "src/include/refstring.h",
        "src/include/ryu/common.h",
        "src/include/ryu/d2fixed.h",
        "src/include/ryu/d2fixed_full_table.h",
        "src/include/ryu/d2s.h",
        "src/include/ryu/d2s_full_table.h",
        "src/include/ryu/d2s_intrinsics.h",
        "src/include/ryu/digit_table.h",
        "src/include/ryu/f2s.h",
        "src/include/ryu/ryu.h",
        "src/include/to_chars_floating_point.h",

        # Filesystem files.
        "src/filesystem/filesystem_common.h",
        "src/filesystem/posix_compat.h",

        # Support ipp files.
        "src/support/runtime/exception_fallback.ipp",
        "src/support/runtime/exception_glibcxx.ipp",
        "src/support/runtime/exception_libcxxabi.ipp",
        "src/support/runtime/exception_libcxxrt.ipp",
        "src/support/runtime/exception_msvc.ipp",
        "src/support/runtime/exception_pointer_cxxabi.ipp",
        "src/support/runtime/exception_pointer_glibcxx.ipp",
        "src/support/runtime/exception_pointer_msvc.ipp",
        "src/support/runtime/exception_pointer_unimplemented.ipp",
        "src/support/runtime/new_handler_fallback.ipp",
        "src/support/runtime/stdexcept_default.ipp",
        "src/support/runtime/stdexcept_vcruntime.ipp",

        # Headers for building iostream.
        "src/include/sso_allocator.h",
        "src/iostream_init.h",
        "src/std_stream.h",
    ],
    compilation_mode = "bootstrap",
    compile_flags = [
        "-std=c++20",
        "-faligned-allocation",
        "-fno-omit-frame-pointer",
        "-funwind-tables",
        "-fstrict-aliasing",
        "-fvisibility-inlines-hidden",
        "-Wno-user-defined-literals",
    ],
    defines = [
        "_LIBCPP_BUILDING_LIBRARY",
        "_LIBCPP_DISABLE_NEW_DELETE_DEFINITIONS",
        "_LIBCPP_ENABLE_EXPERIMENTAL",
        "_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER",
        "_LIBCPP_LINK_PTHREAD_LIB",
        "_LIBCPP_LINK_RT_LIB",
        "_LIBCPP_REMOVE_TRANSITIVE_INCLUDES",
        "_LIBCXXABI_BUILDING_LIBRARY",
        "LIBCXX_BUILDING_LIBCXXABI",
    ],
    exposed_angled_includes = [
        "libcxx/include",
        "$(GENERATED)/libcxx/include",
    ],
    exposed_hdrs = [
        "//libcxx:headers",
    ],
    includes = [
        "libcxx/src",
    ],
    visibility = ["//visibility:public"],
    deps = ["//libcxxabi"],
)
