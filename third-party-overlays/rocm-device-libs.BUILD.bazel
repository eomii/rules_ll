"Build file for the ROCm-Device-Libs."

load("@rules_ll//ll:defs.bzl", "ll_binary")
load("@rules_ll//third-party-overlays:defs.bzl", "opencl_bitcode_library")

# All artifacts from ROCm-Device-Libs are bitcode files. We need these to be in
# a directory "amdgcn/bitcode". The output layout should look like this:
#
#     amdgcn/bitcode/asanrtl.bc
#     amdgcn/bitcode/hip.bc
#     amdgcn/bitcode/oclc_<...>.bc
#     amdgcn/bitcode/ocml.bc
#     amdgcn/bitcode/opencl.bc
#
# Then we can make them available to clang via the --rocm-device-lib-path flag.
# None of the headers in this repository are exported to downstream targets.

ll_binary(
    name = "prepare-builtins",
    srcs = ["utils/prepare-builtins/prepare-builtins.cpp"],
    compile_flags = ["-std=c++17"],
    depends_on_llvm = 1,
)

genrule(
    name = "irif",
    srcs = [
        "irif/src/base-image-intrinsics.ll",
        "irif/src/extended-image-intrinsics.ll",
    ],
    outs = ["irif.bc"],
    cmd = "$(location @llvm-project//llvm:llvm-link) $(SRCS) -o $(OUTS)",
    tools = ["@llvm-project//llvm:llvm-link"],
    visibility = ["//visibility:__pkg__"],
)

OCLC_NAMES = [
    "abi_version_400",
    "abi_version_500",
    "correctly_rounded_sqrt_off",
    "correctly_rounded_sqrt_on",
    "daz_opt_off",
    "daz_opt_on",
    "finite_only_off",
    "finite_only_on",
    "isa_version_1010",
    "isa_version_1011",
    "isa_version_1012",
    "isa_version_1013",
    "isa_version_1030",
    "isa_version_1031",
    "isa_version_1032",
    "isa_version_1033",
    "isa_version_1034",
    "isa_version_1035",
    "isa_version_1036",
    "isa_version_1100",
    "isa_version_1101",
    "isa_version_1102",
    "isa_version_1103",
    "isa_version_600",
    "isa_version_601",
    "isa_version_602",
    "isa_version_700",
    "isa_version_701",
    "isa_version_702",
    "isa_version_703",
    "isa_version_704",
    "isa_version_705",
    "isa_version_801",
    "isa_version_802",
    "isa_version_803",
    "isa_version_805",
    "isa_version_810",
    "isa_version_900",
    "isa_version_902",
    "isa_version_904",
    "isa_version_906",
    "isa_version_908",
    "isa_version_909",
    "isa_version_90a",
    "isa_version_90c",
    "isa_version_940",
    "isa_version_941",
    "isa_version_942",
    "unsafe_math_off",
    "unsafe_math_on",
    "wavefrontsize64_off",
    "wavefrontsize64_on",
]

[
    opencl_bitcode_library(
        name = "oclc_{}".format(name),
        hdrs = ["oclc/inc/oclc.h"],
        srcs = ["oclc/src/{}.cl".format(name)],
    )
    for name in OCLC_NAMES
]

filegroup(
    name = "oclc",
    srcs = [":oclc_{}".format(name) for name in OCLC_NAMES],
)

opencl_bitcode_library(
    name = "ocml",
    hdrs = glob(["ocml/src/*.h"]) + [
        "ocml/inc/ocml.h",
        "irif/inc/irif.h",
        "oclc/inc/oclc.h",
    ],
    srcs = glob(["ocml/src/*.cl"]),
)

opencl_bitcode_library(
    name = "ockl",
    hdrs = glob(["ockl/inc/*.h"]) + [
        "oclc/inc/oclc.h",
        "irif/inc/irif.h",
    ],
    srcs = glob(["ockl/src/*.cl"]),
    bitcode_srcs = ["ockl/src/wgscratch.ll"],
)

opencl_bitcode_library(
    name = "opencl",
    hdrs = glob([
        "ockl/inc/*.h",
        "opencl/src/*/*.h",
    ]) + [
        "oclc/inc/oclc.h",
        "irif/inc/irif.h",
        "ocml/inc/ocml.h",
    ],
    srcs = glob(["opencl/src/*/*.cl"]),
)

opencl_bitcode_library(
    name = "hip",
    hdrs = [
        "ockl/inc/ockl.h",
        "irif/inc/irif.h",
    ],
    srcs = ["hip/src/atomic_fence.cl"],
)

opencl_bitcode_library(
    name = "asanrtl",
    hdrs = glob(["asanrtl/inc/*.h"]) + [
        "ockl/inc/ockl.h",
        "oclc/inc/oclc.h",
        "irif/inc/irif.h",
    ],
    srcs = glob(["asanrtl/src/*.cl"]),
)

filegroup(
    name = "rocm-device-libs",
    srcs = [
        ":asanrtl",
        ":ockl",
        ":hip",
        ":oclc",
        ":ocml",
        ":opencl",
    ],
    visibility = ["//visibility:public"],
)
