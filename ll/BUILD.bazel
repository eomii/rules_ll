"Central build file for the docs, platforms, toolchains and config settings."

load("@bazel_skylib//:bzl_library.bzl", "bzl_library")
load("@bazel_skylib//rules:common_settings.bzl", "string_flag")
load("@stardoc//stardoc:stardoc.bzl", "stardoc")
load("//ll:toolchain.bzl", "ll_toolchain")
load("//ll:transitions.bzl", "COMPILATION_MODES")

LL_MODULES = [
    "actions",
    "args",
    "attributes",
    "compilation_database",
    "coverage",
    "defs",
    "driver",
    "environment",
    # "init",  # Broken until stardoc supports module_extension and tag_class.
    "inputs",
    "ll",
    "llvm_project_deps",
    "outputs",
    "providers",
    "resolve_rule_inputs",
    "toolchain",
    "tools",
    "transitions",
]

bzl_library(
    name = "ll_bzl",
    srcs = [
        "{}.bzl".format(name)
        for name in LL_MODULES
    ],
    deps = [
        "@bazel_skylib//lib:dicts",
        "@bazel_skylib//lib:paths",
        "@bazel_skylib//rules:common_settings",
    ],
)

[
    stardoc(
        name = "{}_docs".format(name),
        out = "{}.md".format(name),
        func_template = "templates/function_template.vm",
        header_template = "templates/header_template.vm",
        input = "{}.bzl".format(name),
        provider_template = "templates/provider_template.vm",
        rule_template = "templates/rule_template.vm",
        deps = [":ll_bzl"],
    )
    for name in LL_MODULES
]

filegroup(
    name = "docs",
    srcs = [
        ":{}_docs".format(name)
        for name in LL_MODULES
    ],
)

# Configurations.

string_flag(
    name = "current_ll_toolchain_configuration",
    build_setting_default = "cpp",
    values = COMPILATION_MODES,
    visibility = ["//visibility:public"],
)

[
    config_setting(
        name = mode,
        flag_values = {
            ":current_ll_toolchain_configuration": mode,
        },
    )
    for mode in COMPILATION_MODES
]

# Toolchain Types.

toolchain_type(name = "toolchain_type")

# Toolchains.

ll_toolchain(
    name = "ll_toolchain_x86_64-unknown-linux-gnu",
    address_sanitizer = select({
        ":bootstrap": [],
        "//conditions:default": [
            "@llvm-project//compiler-rt/lib/asan:clang_rt.asan",
            "@llvm-project//compiler-rt/lib/asan:clang_rt.asan_static",
            "@llvm-project//compiler-rt/lib/asan:clang_rt.asan_cxx",
        ],
    }),
    compiler_runtime = select({
        ":bootstrap": [],
        "//conditions:default": [
            "@llvm-project//compiler-rt:libll_compiler-rt",
            "@llvm-project//compiler-rt/lib/crt:crt",
        ],
    }),
    cpp_abihdrs = select({
        ":bootstrap": None,
        "//conditions:default": "@llvm-project//libcxxabi:headers",
    }),
    cpp_abilib = select({
        ":bootstrap": None,
        "//conditions:default": "@llvm-project//libcxxabi",
    }),
    cpp_stdhdrs = select({
        ":bootstrap": None,
        "//conditions:default": "@llvm-project//libcxx:headers",
    }),
    cpp_stdlib = select({
        ":bootstrap": None,
        "//conditions:default": "@llvm-project//libcxx",
    }),
    exec_compatible_with = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
        "@bazel_tools//tools/cpp:clang",
    ],
    hip_libraries = select({
        ":hip_amdgpu": [
            "@hip//:headers",
            "@hipamd//:headers",
        ],
        ":hip_nvptx": [
            "@hip//:headers",
            "@hipamd//:headers",
        ],
        "//conditions:default": [],
    }),
    hip_runtime = select({
        ":hip_amdgpu": "@hipamd//:libamdhip64",
        "//conditions:default": None,
    }),
    leak_sanitizer = select({
        ":bootstrap": [],
        "//conditions:default": [
            "@llvm-project//compiler-rt/lib/lsan:clang_rt.lsan",
        ],
    }),
    libomp = select({
        "omp_cpu": "@llvm-project//openmp:libomp",
        "//conditions:default": None,
    }),
    memory_sanitizer = select({
        ":bootstrap": [],
        "//conditions:default": [
            "@llvm-project//compiler-rt/lib/msan:clang_rt.msan",
            "@llvm-project//compiler-rt/lib/msan:clang_rt.msan_cxx",
        ],
    }),
    omp_header = select({
        "omp_cpu": "@llvm-project//openmp:omp_header",
        "//conditions:default": None,
    }),
    profile = select({
        ":bootstrap": None,
        "//conditions:default": "@llvm-project//compiler-rt/lib/profile:clang_rt.profile",
    }),
    rocm_device_libs = select({
        ":hip_amdgpu": "@rocm-device-libs//:rocm-device-libs",
        "//conditions:default": None,
    }),
    thread_sanitizer = select({
        ":bootstrap": None,
        "//conditions:default": [
            "@llvm-project//compiler-rt/lib/tsan:clang_rt.tsan",
            "@llvm-project//compiler-rt/lib/tsan:clang_rt.tsan_cxx",
        ],
    }),
    undefined_behavior_sanitizer = select({
        ":bootstrap": [],
        "//conditions:default": [
            "@llvm-project//compiler-rt/lib/ubsan:clang_rt.ubsan_standalone",
            "@llvm-project//compiler-rt/lib/ubsan:clang_rt.ubsan_standalone_cxx",
        ],
    }),
    unwind_library = select({
        ":bootstrap": None,
        "//conditions:default": "@llvm-project//libunwind:libll_unwind",
    }),
    visibility = ["//visibility:public"],
)

toolchain(
    name = "ll_toolchain",
    exec_compatible_with = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
        "@bazel_tools//tools/cpp:clang",
    ],
    toolchain = ":ll_toolchain_x86_64-unknown-linux-gnu",
    toolchain_type = ":toolchain_type",
    visibility = ["//visibility:public"],
)
